plugins:
  - serverless-offline

service: my-new-service

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  apiName: lambda-demo-api-gateway
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "arn:aws:dynamodb:us-east-1:300563897675:table/macmardb"

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /hello
          method: GET
# CREDS=$(aws sts assume-role --role-arn arn:aws:iam::300563897675:role/FullAdminAccessRole --role-session-name codurance-user-playground-script --profile codurance-user-playground )
# RETURN_VAL=$?if [ "$RETURN_VAL" -eq "0" ]; then
#    KEYID=`      echo $CREDS | jq -r '.Credentials.AccessKeyId'`
#    SECRETKEY=`  echo $CREDS | jq -r '.Credentials.SecretAccessKey'`
#    TOKEN=`      echo $CREDS | jq -r '.Credentials.SessionToken'`
#    export AWS_ACCESS_KEY_ID=$KEYID
#    export AWS_SECRET_ACCESS_KEY=$SECRETKEY
#    export AWS_SESSION_TOKEN=$TOKEN
# else
#   echo "Failed to set credentials"
# fi
